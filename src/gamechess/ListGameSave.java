/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gamechess;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nthan
 */
public class ListGameSave extends javax.swing.JFrame {

    /**
     * Creates new form ListGameSave
     */
    private Main mainFrame;
    public ListGameSave(Main main) {
        initComponents();
        mainFrame = main;
        loadListGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_listgame = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table_listgame.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Name", "Date and Time", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table_listgame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_listgameMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_listgame);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void table_listgameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_listgameMouseClicked
        int Row = table_listgame.getSelectedRow();
        String name = (String)table_listgame.getValueAt(Row, 0);
        try{
          Main.readFle(name);
        }
        catch(IOException EX){}
        mainFrame.setVisible(false);
        
    }//GEN-LAST:event_table_listgameMouseClicked

    public void loadListGame(){
        List<String> list = readListGame();
        System.out.println(list.size());
        table_listgame.removeAll();
        DefaultTableModel model = (DefaultTableModel)table_listgame.getModel();
        model.getDataVector().removeAllElements();
        if(list != null){
            for(int i = 0; i < list.size(); i++){
                 model.addRow(new Object[]{list.get(i),
                     getDatetimeOfFile("savegame\\" + list.get(i) + ".txt"),
                     "null"});
            }
        }
        else{
            model.addRow(new Object[]{"null", "", ""});
        }
        table_listgame.setVisible(true);
    }
    
    public List<String> readListGame(){
       
        List<String> list = null;
        InputStream br = null;
        try{
            list = new ArrayList<String>();
        }
        catch(Exception ex){}
        try{
            String line;
           br = new FileInputStream("savegame\\list.txt");
           InputStreamReader isr = new InputStreamReader(br, Charset.forName("UTF-8"));
             BufferedReader brt = new BufferedReader(isr);
             while((line = brt.readLine()) != null){
                 list.add(line);
             }
           
           
        }
        
        catch(IOException ex){
            System.out.println(ex.getMessage());
        }
        
        finally{
            try{
            if(br != null){
              br.close();
            }
            }
            catch(Exception ex){
                
            }
        }
        return list;
    }
    
    public String getDatetimeOfFile(String path){
        File file = new File(path);

	System.out.println("Before Format : " + file.lastModified());

	SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
        return sdf.format(file.lastModified()).toString();
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_listgame;
    // End of variables declaration//GEN-END:variables
}
